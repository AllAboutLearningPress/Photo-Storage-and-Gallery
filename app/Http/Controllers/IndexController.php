<?php

namespace App\Http\Controllers;

use App\Models\Photo;
use Aws\Credentials\InstanceProfileProvider;
use Aws\Rekognition\RekognitionClient;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Inertia\Inertia;
use GuzzleHttp\Psr7\Request as Req2;
use GuzzleHttp\Client;
use Aws\Sdk;

class IndexController extends Controller
{
    /**
     * Display a listing of photos in /.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // $client = new RekognitionClient(array(
        //     //'credentials' => $credentials,
        //     'region' => config('services.ses.region'),
        //     'version' => 'latest'
        // ));
        // $result = $client->detectLabels(
        //     [
        //         'Image' => [
        //             'S3Object' => [
        //                 'Bucket' => config('aws.fullsize_bucket'),
        //                 'Name' => 'full_size/bc3f85429977ad2d2dace9b5aa1233cab8d53b58fd65a03a8a4795194f39c6c9.jpeg'
        //             ],
        //         ]
        //     ]
        // );
        // $label_ids = [];
        // $label_scores = [];

        // return dd($result['Labels']);
        // retriving photos if height column is set.
        // height is only set if the previews are generated by lambda function
        // Inertia::lazy(function () {

        $photos = Photo::where("height", "!=", null)
            ->select(['id', 'file_name', 'height', 'width', 'slug'])
            ->orderBy('id', 'DESC')
            ->cursorPaginate(30);
        //     return genTempSrc($photos, 'thumbnails');
        // });
        // $start = microtime(true);
        // genTempSrc($photos, 'thumbnails');
        //dd('ss', microtime(true) - $start);
        return Inertia::render('Index', [
            'photos' => genTempSrc($photos, 'thumbnails'), // adding temporary thumbnail links to s3
            'title' => 'AALP Photos Index'
        ])->withViewData(['title' => 'AALP Photos', 'load_pig' => true,]);
    }

    /**
     * Used to load more photos from requested offset
     * @return Illuminate\Database\Eloquent\Collection
     */
    public function fetch_more(Request $request)
    {
        $photos = Photo::where("height", "!=", null)->orderBy('id', 'DESC')->cursorPaginate(30);
        return genTempSrc($photos, 'thumbnails');
    }
}
