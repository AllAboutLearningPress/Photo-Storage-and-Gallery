<?php

namespace App\Http\Controllers;

use App\Models\Photo;
use Aws\Credentials\InstanceProfileProvider;
use Aws\Rekognition\RekognitionClient;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Inertia\Inertia;
use GuzzleHttp\Psr7\Request as Req2;
use GuzzleHttp\Client;
use Aws\Sdk;

class IndexController extends Controller
{
    /**
     * Display a listing of photos in /.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // $client = new RekognitionClient(array(
        //     //'credentials' => $credentials,
        //     'region' => config('services.ses.region'),
        //     'version' => 'latest'
        // ));
        // $result = $client->detectLabels(
        //     [
        //         'Image' => [
        //             'S3Object' => [
        //                 'Bucket' => config('aws.fullsize_bucket'),
        //                 'Name' => 'full_size/bc3f85429977ad2d2dace9b5aa1233cab8d53b58fd65a03a8a4795194f39c6c9.jpeg'
        //             ],
        //         ]
        //     ]
        // );
        // $label_ids = [];
        // $label_scores = [];

        // return dd($result['Labels']);
        // retriving photos if height column is set.
        // height is only set if the previews are generated by lambda function

        $photos = Photo::where("height", "!=", null)->select(['id', 'file_name', 'height', 'width', 'slug'])->orderBy('id', 'DESC')->cursorPaginate(30);
        // $start = microtime(true);
        // genTempSrc($photos, 'thumbnails');
        //dd('ss', microtime(true) - $start);
        return Inertia::render('Index', [
            'photos' => genTempSrc($photos, 'thumbnails'), // adding temporary thumbnail links to s3
            'title' => 'AALP Photos Index'
        ])->withViewData(['title' => 'AALP Photos', 'load_pig' => true,]);
    }

    /**
     * Used to load more photos from requested offset
     * @return Illuminate\Database\Eloquent\Collection
     */
    public function fetch_more(Request $request)
    {
        $photos = Photo::where("height", "!=", null)->orderBy('id', 'DESC')->cursorPaginate(30);
        return $this->generateSrc($photos);
    }

    /**
     * @param Array $photos - The array of photos returned by Laravel eloquet
     * @return Array Returns the same array with added url parameter
     */
    public function generateSrc($photos)
    {
        foreach ($photos as $photo) {
            $photo->add_temp_url('thumbnails');
        }
        return $photos;
    }


    public function trash()
    {
        return Inertia::render('Index', [
            'photos' => $this->generateSrc(Photo::onlyTrashed()->where('height', "!=", null)->cursorPaginate(30)),
            'title' => 'Trashed Photos',
        ])->withViewData(['title' => 'Trashed Photos']);
    }
    const SERVER_URI = 'http://169.254.169.254/latest/';
    const CRED_PATH = 'meta-data/iam/security-credentials/';
    const TOKEN_PATH = 'api/token';

    const ENV_DISABLE = 'AWS_EC2_METADATA_DISABLED';
    const ENV_TIMEOUT = 'AWS_METADATA_SERVICE_TIMEOUT';
    const ENV_RETRIES = 'AWS_METADATA_SERVICE_NUM_ATTEMPTS';
    public function testing()
    {



        $client = new Client([
            // Base URI is used with relative requests
            'base_uri' => 'http://169.254.169.254',
            // You can set any number of default request options.
            'timeout'  => 2.0,
        ]);

        // request for secure token
        $request = new Req2('PUT', self::SERVER_URI . self::TOKEN_PATH);
        $userAgent = 'aws-sdk-php/' . Sdk::VERSION;

        $userAgent .= ' ' . \Aws\default_user_agent();
        $request = $request->withHeader('User-Agent', $userAgent);
        $headers =   [
            'x-aws-ec2-metadata-token-ttl-seconds' => 21600
        ];
        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }
        $token = $client->send($request)->getBody()->getContents();

        echo $token;



        // retrive profile
        $request = new Req2('GET', self::SERVER_URI . self::CRED_PATH);
        $request = $request->withHeader('User-Agent', $userAgent);
        $headers = [
            'x-aws-ec2-metadata-token' => $token
        ];
        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }
        $profile = $client->send($request)->getBody()->getContents();

        // retrive creds
        $request = new Req2('GET', self::SERVER_URI . self::CRED_PATH . $profile);
        $request = $request->withHeader('User-Agent', $userAgent);
        $headers = [
            'x-aws-ec2-metadata-token' => $token
        ];
        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }
        $creds = $client->send($request)->getBody()->getContents();

        echo $creds;

        $provider = \Aws\Credentials\CredentialProvider::defaultProvider();
        $creds = $provider()->wait();
        echo $creds->getAccessKeyId();
    }
}
